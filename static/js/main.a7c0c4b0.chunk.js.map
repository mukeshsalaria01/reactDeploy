{"version":3,"sources":["App.js","service.js","test.js","serviceWorker.js","index.js","logo.svg"],"names":["App","ItemService","this","items","link","name","summary","year","country","price","description","Promise","resolve","itemLink","i","length","item","console","log","itemId","Ribbon","props","itemService","onCreateItem","bind","className","id","type","placeholder","onClick","data-toggle","data-target","aria-expanded","aria-controls","newItem","createItem","then","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"+PA0BeA,I,2DCOAC,E,WAhCb,aAAe,oBACbC,KAAKC,MAAQ,CACX,CAACC,KAAK,EAAGC,KAAK,QAASC,QAAQ,iBAAkBC,KAAK,OAAQC,QAAQ,KAAMC,MAAM,OAAQC,YAAY,UACtG,CAACN,KAAK,EAAGC,KAAK,QAASC,QAAQ,iBAAkBC,KAAK,OAAQC,QAAQ,KAAMC,MAAM,OAAQC,YAAY,UACtG,CAACN,KAAK,EAAGC,KAAK,QAASC,QAAQ,iBAAkBC,KAAK,OAAQC,QAAQ,KAAMC,MAAM,OAAQC,YAAY,W,+LAI/FC,QAAQC,QAAQV,KAAKC,Q,6KAElBU,G,uEACJC,EAAI,E,YAAGA,EAAIZ,KAAKC,MAAMY,Q,mBACvBb,KAAKC,MAAMW,GAAGV,OAASS,E,yCACnBF,QAAQC,QAAQV,KAAKC,MAAMW,K,OAFAA,I,+CAK/B,M,iLAEQE,G,wEACfC,QAAQC,IAAI,6BACZD,QAAQC,IAAIF,G,kBACLL,QAAQC,QAAQI,I,4KAERG,G,iEACfF,QAAQC,IAAI,6BACZD,QAAQC,IAAI,WAAaC,G,4KAEVH,G,iEACfC,QAAQC,IAAI,6BACZD,QAAQC,IAAIF,G,yGCmCDI,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,IAAIrB,EACvB,EAAKsB,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,qDAOb,OACS,oCACG,yBAAKC,UAAU,WAAWC,GAAG,mBACzB,yBAAKD,UAAU,qCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aAEX,0BAAMC,GAAG,SACL,yBAAKD,UAAU,YACX,yBAAKA,UAAU,OACX,2BAAOE,KAAK,OAAOF,UAAU,eAAeC,GAAG,WAAWE,YAAY,eAE1E,yBAAKH,UAAU,OACX,2BAAOE,KAAK,WAAWF,UAAU,eAAeC,GAAG,WAAWE,YAAY,cAE9E,yBAAKH,UAAU,OACX,4BAAQE,KAAK,SAASD,GAAG,YAAYD,UAAU,qBAA/C,YAGR,0BAAMC,GAAG,gBAGb,yBAAKD,UAAU,kBAAkBC,GAAG,YAChC,4BAAQD,UAAU,oBAAoBE,KAAK,SAASD,GAAG,qBAAvD,sBAUpB,4BAAQG,QAAS3B,KAAKqB,aAAcE,UAAU,kDAAkDE,KAAK,SAASD,GAAG,kBAAkBI,cAAY,WAC3IC,cAAY,mBAAmBC,gBAAc,QAAQC,gBAAc,mBACnE,uC,mCAMPC,GACbhC,KAAKoB,YAAYa,WAAWD,GAASE,MAAK,SAAApB,W,GAnDzBqB,aCMDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLHC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,YDsHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a7c0c4b0.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","class ItemService {\r\n  constructor() {\r\n    this.items = [\r\n      {link:1, name:\"test1\", summary:\"Summary Test 1\", year:\"2001\", country:\"us\", price:\"1000\", description:\"Desc 1\"},\r\n      {link:2, name:\"test2\", summary:\"Summary Test 2\", year:\"2002\", country:\"uk\", price:\"2000\", description:\"Desc 2\"},\r\n      {link:3, name:\"test3\", summary:\"Summary Test 3\", year:\"2003\", country:\"cz\", price:\"3000\", description:\"Desc 3\"},\r\n    ];\r\n  }\r\n  async retrieveItems() {\r\n      return Promise.resolve(this.items);\r\n  }\r\n  async getItem(itemLink) {\r\n    for(var i = 0; i < this.items.length; i++) {\r\n      if ( this.items[i].link === itemLink) {\r\n        return Promise.resolve(this.items[i]);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  async createItem(item) {\r\n    console.log(\"ItemService.createItem():\");\r\n    console.log(item);\r\n    return Promise.resolve(item);\r\n  }\r\n  async deleteItem(itemId) {\r\n    console.log(\"ItemService.deleteItem():\");\r\n    console.log(\"item ID:\" + itemId);\r\n  }\r\n  async updateItem(item) {\r\n    console.log(\"ItemService.updateItem():\");\r\n    console.log(item);\r\n  }\r\n}\r\nexport default ItemService;","\r\nimport React, {Component} from 'react';\r\nimport ItemService from './service';\r\n\r\n\r\n\r\nclass Ribbon extends Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.itemService = new ItemService();   \r\n    this.onCreateItem = this.onCreateItem.bind(this);\r\n\r\n  }\r\n  render() {\r\n        return (\r\n                 <>\r\n                    <div className=\"collapse\" id=\"collapseExample\">\r\n                        <div className=\"card bg-dark text-white rounded-0\">\r\n                            <div className=\"container\">\r\n                                <div className=\"card-body\">\r\n\r\n                                    <form id=\"login\">\r\n                                        <div className=\"form-row\">\r\n                                            <div className=\"col\">\r\n                                                <input type=\"text\" className=\"form-control\" id=\"userName\" placeholder=\"User Name\" />\r\n                                            </div>\r\n                                            <div className=\"col\">\r\n                                                <input type=\"password\" className=\"form-control\" id=\"password\" placeholder=\"Password\" />\r\n                                            </div>\r\n                                            <div className=\"col\">\r\n                                                <button type=\"button\" id=\"btnLogin1\" className=\"btn btn-secondary\">Log In</button>\r\n                                            </div>\r\n                                        </div>\r\n                                        <span id=\"logInError\"></span>\r\n                                    </form>\r\n\r\n                                    <div className=\"dropdown hidden\" id=\"dropdown\">\r\n                                        <button className=\"btn btn-secondary\" type=\"button\" id=\"pagePropertyModel\">\r\n                                            Page Property\r\n\t\t\t\t\t\t\t</button>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <button onClick={this.onCreateItem} className=\"btn bg-dark text-white float-right collapse-btn\" type=\"button\" id=\"collapse-button\" data-toggle=\"collapse\"\r\n                        data-target=\"#collapseExample\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                        <span >+</span>\r\n                    </button>\r\n                 </>\r\n            \r\n        );\r\n  }\r\n    onCreateItem(newItem) {   \r\n    this.itemService.createItem(newItem).then(item => {\r\n        \r\n      }\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default Ribbon;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Ribbon from './test';\nimport * as serviceWorker from './serviceWorker';\n\n\n  // <React.StrictMode>\n    // <App />\n  // </React.StrictMode>,\n  //document.getElementById('root')\n     //ReactDOM.render(<App />, document.getElementById(\"root\"));\n   ReactDOM.render(<Ribbon />, document.getElementById(\"root123\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}