{"version":3,"sources":["logo.svg","App.js","service.js","test.js","serviceWorker.js","index.js"],"names":["module","exports","App","ItemService","fetch","method","mode","headers","window","localStorage","token","then","response","ok","handleResponseError","json","catch","error","handleError","refreshToken","newitem","body","JSON","stringify","Error","status","console","log","Ribbon","props","itemService","setShow","bind","chackToken","onPageOpen","login","handleChange","state","showDetails","showLogin","showError","open","show","searchable","virtual","target","this","setState","name","value","className","id","type","placeholder","username","onChange","password","onClick","data-toggle","data-target","aria-expanded","aria-controls","Modal","onHide","dialogClassName","aria-labelledby","Header","closeButton","Title","Body","style","marginLeft","readOnly","PageName","PageDisplayName","Discription","defaultChecked","handleChangeChk","handleChangeChk12","data","Username","Password","item","undefined","accessToken","validateToken","pageProperty","nodeName","displayName","description","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.49b45b99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","\r\nclass ItemService {\r\n\r\n    async validateToken() {\r\n        return fetch('https://wakanda-cm.developerprogram.org/api/v1/validate', {\r\n            method: \"GET\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-auth-token\": window.localStorage.token\r\n            },\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    this.handleResponseError(response);\r\n                }\r\n                return response.json();\r\n            })\r\n            .catch(error => {\r\n                this.handleError(error);\r\n            });\r\n    }\r\n\r\n    async refreshToken() {\r\n        return fetch('https://wakanda-cm.developerprogram.org/api/v1/accessToken', {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"refresh-token\": window.localStorage.refreshToken\r\n            },\r\n        }).then(response => {\r\n            if (!response.ok) {\r\n                this.handleResponseError(response);\r\n            }\r\n            return response.json();\r\n        })\r\n            .catch(error => {\r\n                this.handleError(error);\r\n            });\r\n    }\r\n\r\n    async login(newitem) {\r\n        debugger\r\n        return fetch('https://wakanda-cm.developerprogram.org/api/v1/login', {\r\n            method: \"post\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(newitem)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    this.handleResponseError(response);\r\n                }\r\n                return response.json();\r\n            })\r\n            .catch(error => {\r\n                this.handleError(error);\r\n            });\r\n    }\r\n\r\n\r\n\r\n    async pageProperty() {\r\n        return fetch('https://wakanda-cm.developerprogram.org/api/v1/channel/page/show?uuid=7c41b988-ba6f-4785-9750-6075e18a3c1c', {\r\n            method: \"GET\",\r\n            mode: \"cors\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-auth-token\": window.localStorage.token\r\n            },\r\n        }).then(response => {\r\n            if (!response.ok) {\r\n                this.handleResponseError(response);\r\n            }\r\n            return response.json();\r\n        })\r\n            .catch(error => {\r\n                this.handleError(error);\r\n            });\r\n    }\r\n\r\n    handleResponseError(response) {\r\n        throw new Error(\"HTTP error, status = \" + response.status);\r\n    }\r\n    handleError(error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport default ItemService;","\r\nimport React, { Component } from 'react';\r\nimport ItemService from './service';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nclass Ribbon extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        this.itemService = new ItemService();\r\n        this.setShow = this.setShow.bind(this);\r\n        this.chackToken = this.chackToken.bind(this);\r\n        this.onPageOpen = this.onPageOpen.bind(this);\r\n        this.login = this.login.bind(this);\r\n        this.refreshToken = this.refreshToken.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            showDetails: false,\r\n            showLogin: false,\r\n            showError: false,\r\n            open: false,\r\n            show: false,\r\n            searchable: false,\r\n            virtual: false\r\n        }\r\n    }\r\n\r\n    handleChange({ target }) {\r\n        this.setState({\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const showDetails = this.state.showDetails;\r\n        const showLogin = this.state.showLogin;\r\n        const showError = this.state.showError;\r\n        const show = this.state.show;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"collapse\" id=\"collapseExample\">\r\n                    <div className=\"card bg-dark text-white rounded-0\">\r\n                        <div className=\"container\">\r\n                            <div className=\"card-body\">\r\n\r\n                                {showLogin && <form id=\"login\" >\r\n                                    <div className=\"form-row\">\r\n                                        <div className=\"col\">\r\n                                            <input type=\"text\" className=\"form-control\" name=\"Username\" placeholder=\"User Name\" value={this.state.username}\r\n                                                onChange={this.handleChange} />\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            <input type=\"password\" className=\"form-control\" name=\"Password\" placeholder=\"Password\" value={this.state.password} onChange={this.handleChange} />\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n                                            <button type=\"button\" id=\"btnLogin1\" onClick={this.login} className=\"btn btn-secondary\">Log In</button>\r\n                                        </div>\r\n                                    </div>\r\n                                    {showError && <span id=\"logInError\"> Invalid username & password.</span>}\r\n\r\n                                </form>}\r\n\r\n                                {showDetails && <div className=\"dropdown\"><button className=\"btn btn-secondary\" type=\"button\" onClick={this.onPageOpen}>Page Property</button></div>}\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button onClick={this.chackToken} className=\"btn bg-dark text-white float-right collapse-btn\" type=\"button\" id=\"collapse-button\" data-toggle=\"collapse\"\r\n                    data-target=\"#collapseExample\" aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                    <span >+</span>\r\n                </button>\r\n\r\n\r\n                <Modal\r\n                    show={show}\r\n                    onHide={this.setShow}\r\n                    dialogClassName=\"modal-90w\"\r\n                    aria-labelledby=\"example-custom-modal-styling-title\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"example-custom-modal-styling-title\">\r\n                            Page Properties\r\n                    </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body style={{ marginLeft: '20%' }}>\r\n\r\n                        <div className=\"form-group row\">\r\n                            <div className=\"col-md-6 row\">Page Name</div>\r\n                            <div className=\"col-md-6\">\r\n                                <input type=\"text\" className=\"from-control\" readOnly value={this.state.PageName} ></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <div className=\"col-md-6 row\">Page Display Name</div>\r\n                            <div className=\"col-md-6\">\r\n                                <input type=\"text\" className=\"from-control\" readOnly id=\"txtPageDisplayName\" value={this.state.PageDisplayName} ></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <div className=\"col-md-6 row\">Discription</div>\r\n                            <div className=\"col-md-6\">\r\n                                <input type=\"text\" className=\"from-control\" readOnly id=\"txtDiscription\" value={this.state.Discription} ></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <div className=\"col-md-6 row\">Searchable</div>\r\n                            <div className=\"col-md-6\">\r\n                                <input type=\"checkbox\" className=\"from-control\" id=\"chkSearchable\" defaultChecked={this.state.searchable} onChange={this.handleChangeChk}></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group row\">\r\n                            <div className=\"col-md-6 row\">Virtual</div>\r\n                            <div className=\"col-md-6\">\r\n                                <input className=\"from-control\" type=\"checkbox\" id=\"chkVirtual\" defaultChecked={this.state.virtual} onChange={this.handleChangeChk12}></input>\r\n                            </div>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    login() {\r\n        var data = {\r\n            username: this.state.Username,\r\n            password: this.state.Password\r\n        };\r\n        this.itemService.login(data).then(item => {\r\n            if (item != undefined && item.username != null) {\r\n                window.localStorage.refreshToken = item.refreshToken;\r\n                window.localStorage.token = item.accessToken;\r\n                this.setState({\r\n                    showDetails: true,\r\n                    showLogin: false\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    showError: true,\r\n                    showDetails: false,\r\n                    showLogin: true\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    chackToken() {\r\n        this.itemService.validateToken().then(item => {\r\n            if (item != undefined && item.username != null) {\r\n                window.localStorage.refreshToken = item.refreshToken;\r\n                window.localStorage.token = item.accessToken;\r\n                this.setState({\r\n                    showDetails: true,\r\n                    showLogin: false\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    showDetails: false,\r\n                    showLogin: true\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    refreshToken() {\r\n        this.itemService.refreshToken().then(item => {\r\n            if (item != undefined && item.username != null) {\r\n                window.localStorage.refreshToken = item.refreshToken;\r\n                window.localStorage.token = item.accessToken;\r\n                this.setState({\r\n                    showDetails: true,\r\n                    showLogin: false\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    showDetails: false,\r\n                    showLogin: true\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    onPageOpen() {\r\n        this.itemService.pageProperty().then(item => {\r\n            if (item) {\r\n\r\n                if (item.data.searchable) {\r\n                    this.setState({\r\n                        searchable: true\r\n                    });\r\n                }\r\n\r\n\r\n                if (item.data.virtual) {\r\n                    this.setState({\r\n                        virtual: true\r\n                    });\r\n                }\r\n\r\n                this.setState({\r\n                    show: true,\r\n                    PageName: item.data.nodeName,\r\n                    PageDisplayName: item.data.displayName,\r\n                    Discription: item.data.description,\r\n                    //uuid: item.data.UUID\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    showDetails: false,\r\n                    showLogin: true\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    setShow() {\r\n        this.setState({\r\n            show: !this.state.show\r\n        });\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Ribbon;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Ribbon from './test';\nimport * as serviceWorker from './serviceWorker';\n\n\n  // <React.StrictMode>\n    // <App />\n  // </React.StrictMode>,\n  //document.getElementById('root')\n     //ReactDOM.render(<App />, document.getElementById(\"root\"));\n   ReactDOM.render(<Ribbon />, document.getElementById(\"root123\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}